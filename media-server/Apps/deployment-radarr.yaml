apiVersion: apps/v1
kind: Deployment
metadata:
  name:  radarr
  namespace: media-server
  labels:
    app:  radarr
spec:
  selector:
    matchLabels:
      app: radarr
  replicas: 1
  template:
    metadata:
      labels:
        app:  radarr
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  radarr
        image: ghcr.io/linuxserver/radarr
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1024m
            memory: 1Gi
        #livenessProbe:
          #httpGet:
            #path: /settings
            #port: 7878
          #initialDelaySeconds: 30
          #timeoutSeconds: 5
          #successThreshold: 1
          #failureThreshold: 3
          #periodSeconds: 10
        #readinessProbe:
          #httpGet:
            #path: /_status/healthz
            #port: 80
          #initialDelaySeconds: 5
          #timeoutSeconds: 2
          #successThreshold: 1
          #failureThreshold: 3
          #periodSeconds: 10
        env:      
        - name: PUID
          value: "10050"
        - name: PGID
          value: "10050"
        - name: TZ
          value: America/Chicago
        ports:
        - containerPort:  7878
          name:  http
        volumeMounts:
        - name: nfs-downloads
          mountPath: /data/downloads
        - name: nfs-appdata
          mountPath: /config
      volumes:
        - name: nfs-downloads
          persistentVolumeClaim:
            claimName: claim-downloads
        - name: nfs-appdata
          persistentVolumeClaim:
            claimName: claim-appdata-radarr

      restartPolicy: Always


---

#appdata
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: claim-appdata-radarr
  namespace: media-server
  labels:
    app: radarr
  annotations:
    nfs.io/storage-path: "radarr"
spec:
  storageClassName: nfs-appdata
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 256Mi


---
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: media-server
spec:
  selector:
    app: radarr
  type: LoadBalancer
  ports:
  - name: radarr
    port: 7878
    targetPort: 7878
    protocol: TCP